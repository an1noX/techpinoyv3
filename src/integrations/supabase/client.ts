
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { PrinterMakeRPC, PrinterSeriesRPC, PrinterModelRPC, AuditLogRPCResponse, PrinterModelDetails } from '@/types';

const SUPABASE_URL = "https://fzmtjhrokilijrzwqgdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ6bXRqaHJva2lsaWpyendxZ2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MzExODgsImV4cCI6MjA2MDQwNzE4OH0.ZJ_oFhQB2c5IIC8N_-IUTQt45i2xrRU5-SXSntPi2Ac";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add type-safe RPC function wrappers
export const rpcGetPrinterMakes = async () => {
  const result = await supabase.rpc('get_printer_makes');
  return { data: result.data as PrinterMakeRPC[] | null, error: result.error };
};

export const rpcGetPrinterSeries = async (makeId: string) => {
  const result = await supabase.rpc('get_printer_series', { make_id: makeId });
  return { data: result.data as PrinterSeriesRPC[] | null, error: result.error };
};

export const rpcGetPrinterModels = async (seriesId: string) => {
  const result = await supabase.rpc('get_printer_models', { series_id: seriesId });
  return { data: result.data as PrinterModelRPC[] | null, error: result.error };
};

export const rpcCreatePrinterMake = async (name: string) => {
  const result = await supabase.rpc('create_printer_make', { name });
  return { data: result.data as PrinterMakeRPC | null, error: result.error };
};

export const rpcCreatePrinterSeries = async (makeId: string, name: string) => {
  const result = await supabase.rpc('create_printer_series', { make_id: makeId, name });
  return { data: result.data as PrinterSeriesRPC | null, error: result.error };
};

export const rpcCreatePrinterModel = async (seriesId: string, name: string) => {
  const result = await supabase.rpc('create_printer_model', { series_id: seriesId, name });
  return { data: result.data as PrinterModelRPC | null, error: result.error };
};

export const rpcLogPrinterAction = async (
  entityType: string,
  entityId: string,
  action: string,
  details: Record<string, any>
) => {
  const result = await supabase.rpc('log_printer_action', {
    entity_type: entityType,
    entity_id: entityId,
    action,
    details
  });
  return { data: result.data as AuditLogRPCResponse | null, error: result.error };
};

export const rpcGetPrinterModelDetails = async (modelId: string) => {
  const result = await supabase.rpc('get_printer_model_details', { model_id: modelId });
  return { data: result.data as PrinterModelDetails | null, error: result.error };
};
