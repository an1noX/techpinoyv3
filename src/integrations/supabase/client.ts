
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { PrinterMakeRPC, PrinterSeriesRPC, PrinterModelRPC, AuditLogRPCResponse, PrinterModelDetails } from '@/types';

const SUPABASE_URL = "https://fzmtjhrokilijrzwqgdx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ6bXRqaHJva2lsaWpyendxZ2R4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ4MzExODgsImV4cCI6MjA2MDQwNzE4OH0.ZJ_oFhQB2c5IIC8N_-IUTQt45i2xrRU5-SXSntPi2Ac";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Add type-safe RPC function wrappers
export const rpcGetPrinterMakes = () => 
  supabase.rpc('get_printer_makes') as unknown as Promise<{ data: PrinterMakeRPC[] | null, error: any }>;

export const rpcGetPrinterSeries = (makeId: string) => 
  supabase.rpc('get_printer_series', { make_id: makeId }) as unknown as Promise<{ data: PrinterSeriesRPC[] | null, error: any }>;

export const rpcGetPrinterModels = (seriesId: string) => 
  supabase.rpc('get_printer_models', { series_id: seriesId }) as unknown as Promise<{ data: PrinterModelRPC[] | null, error: any }>;

export const rpcCreatePrinterMake = (name: string) => 
  supabase.rpc('create_printer_make', { name }) as unknown as Promise<{ data: PrinterMakeRPC | null, error: any }>;

export const rpcCreatePrinterSeries = (makeId: string, name: string) => 
  supabase.rpc('create_printer_series', { make_id: makeId, name }) as unknown as Promise<{ data: PrinterSeriesRPC | null, error: any }>;

export const rpcCreatePrinterModel = (seriesId: string, name: string) => 
  supabase.rpc('create_printer_model', { series_id: seriesId, name }) as unknown as Promise<{ data: PrinterModelRPC | null, error: any }>;

export const rpcLogPrinterAction = (
  entityType: string,
  entityId: string,
  action: string,
  details: Record<string, any>
) => 
  supabase.rpc('log_printer_action', {
    entity_type: entityType,
    entity_id: entityId,
    action,
    details
  }) as unknown as Promise<{ data: AuditLogRPCResponse | null, error: any }>;

export const rpcGetPrinterModelDetails = (modelId: string) =>
  supabase.rpc('get_printer_model_details', { model_id: modelId }) as unknown as Promise<{ data: PrinterModelDetails | null, error: any }>;
